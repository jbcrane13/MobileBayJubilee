========================================
FIREBASE SECURITY RULES - PRODUCTION
Apply these BEFORE launching the app
========================================

# FIRESTORE SECURITY RULES
Firebase Console → Firestore Database → Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function - check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function - check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // CONDITIONS - Read-only for all users
    match /conditions/{conditionId} {
      allow read: if true; // Anyone can read condition scores
      allow write: if false; // Only backend/admin can write (use Cloud Functions)
    }

    // REPORTS - Authenticated users can create, anyone can read
    match /reports/{reportId} {
      allow read: if true; // Anyone can read reports
      allow create: if isSignedIn()
        && request.resource.data.reportedBy == request.auth.uid
        && request.resource.data.reportType in ['fullJubilee', 'earlyWarning', 'allClear']
        && request.resource.data.intensity in ['extreme', 'heavy', 'moderate', 'low'];
      allow update: if isSignedIn(); // Users can verify (increment verifications)
      allow delete: if isSignedIn() && isOwner(resource.data.reportedBy); // Only owner can delete
    }

    // USERS - Users can read all, but only update their own
    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles (for display names, etc.)
      allow create: if isSignedIn() && isOwner(userId); // Users create their own profile
      allow update: if isSignedIn() && isOwner(userId); // Users update only their own
      allow delete: if isSignedIn() && isOwner(userId); // Users delete only their own
    }

    // LOCATIONS - Read-only reference data
    match /locations/{locationId} {
      allow read: if true; // Anyone can read locations
      allow write: if false; // Only admin can modify (use Firebase Console)
    }
  }
}

# STORAGE SECURITY RULES
Firebase Console → Storage → Rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Report Photos - Authenticated users can upload, anyone can read
    match /report_photos/{userId}/{reportId}/{filename} {
      allow read: if true; // Anyone can view photos
      allow write: if request.auth != null
        && request.auth.uid == userId
        && request.resource.size < 10 * 1024 * 1024  // Max 10MB
        && request.resource.contentType.matches('image/.*'); // Images only
    }

    // Profile Photos - Users can only upload their own
    match /profile_photos/{userId}/{filename} {
      allow read: if true; // Anyone can view profile photos
      allow write: if request.auth != null
        && request.auth.uid == userId
        && request.resource.size < 5 * 1024 * 1024  // Max 5MB
        && request.resource.contentType.matches('image/.*'); // Images only
    }
  }
}

========================================
TESTING SECURITY RULES
========================================

Use Firebase Emulator Suite for local testing:

1. Install Firebase CLI:
   npm install -g firebase-tools

2. Initialize Firebase in project:
   cd /Users/blake/Projects/MobileBayJubilee
   firebase init emulators

3. Select:
   - Firestore
   - Storage
   - Authentication

4. Start emulators:
   firebase emulators:start

5. Point iOS app to emulators:
   // In MobileBayJubileeApp.swift
   #if DEBUG
   let settings = Firestore.firestore().settings
   settings.host = "localhost:8080"
   settings.isSSLEnabled = false
   Firestore.firestore().settings = settings
   #endif

========================================
BEFORE PRODUCTION CHECKLIST
========================================

✅ Firestore rules applied (not in TEST MODE)
✅ Storage rules applied (not in TEST MODE)
✅ APNs certificate uploaded
✅ Sign in with Apple configured in Apple Developer
✅ Security rules tested with emulators
✅ Test user accounts created
✅ Rate limiting enabled (Firebase Console → Authentication → Settings)
✅ Budget alerts configured (Google Cloud Console → Billing)
✅ Error monitoring enabled (Firebase Crashlytics)
✅ Analytics enabled (Firebase Analytics)

========================================
